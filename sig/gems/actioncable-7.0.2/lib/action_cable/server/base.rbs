module ActionCable
  module Server
    # A singleton ActionCable::Server instance is available via ActionCable.server. It's used by the Rack process that starts the Action Cable server, but
    # is also used by the user to reach the RemoteConnections object, which is used for finding and disconnecting connections across all servers.
    #
    # Also, this is the server instance used for broadcasting. See Broadcasting for more information.
    class Base
      include ActionCable::Server::Broadcasting

      include ActionCable::Server::Connections

      attr_reader config: untyped

      def self.logger: () -> untyped

      attr_reader mutex: untyped

      def initialize: (?config: untyped config) -> void

      # Called by Rack to set up the server.
      def call: (untyped env) -> untyped

      # Disconnect all the connections identified by +identifiers+ on this server or any others via RemoteConnections.
      def disconnect: (untyped identifiers) -> untyped

      def restart: () -> untyped

      # Gateway to RemoteConnections. See that class for details.
      def remote_connections: () -> untyped

      def event_loop: () -> untyped

      # The worker pool is where we run connection callbacks and channel actions. We do as little as possible on the server's main thread.
      # The worker pool is an executor service that's backed by a pool of threads working from a task queue. The thread pool size maxes out
      # at 4 worker threads by default. Tune the size yourself with <tt>config.action_cable.worker_pool_size</tt>.
      #
      # Using Active Record, Redis, etc within your channel actions means you'll get a separate connection from each thread in the worker pool.
      # Plan your deployment accordingly: 5 servers each running 5 Puma workers each running an 8-thread worker pool means at least 200 database
      # connections.
      #
      # Also, ensure that your database connection pool size is as least as large as your worker pool size. Otherwise, workers may oversubscribe
      # the database connection pool and block while they wait for other workers to release their connections. Use a smaller worker pool or a larger
      # database connection pool instead.
      def worker_pool: () -> untyped

      # Adapter used for all streams/broadcasting.
      def pubsub: () -> untyped

      # All of the identifiers applied to the connection class associated with this server.
      def connection_identifiers: () -> untyped
    end
  end
end
