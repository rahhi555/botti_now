module ActionCable
  # If you need to disconnect a given connection, you can go through the
  # RemoteConnections. You can find the connections you're looking for by
  # searching for the identifier declared on the connection. For example:
  #
  #   module ApplicationCable
  #     class Connection < ActionCable::Connection::Base
  #       identified_by :current_user
  #       ....
  #     end
  #   end
  #
  #   ActionCable.server.remote_connections.where(current_user: User.find(1)).disconnect
  #
  # This will disconnect all the connections established for
  # <tt>User.find(1)</tt>, across all servers running on all machines, because
  # it uses the internal channel that all of these servers are subscribed to.
  class RemoteConnections
    attr_reader server: untyped

    def initialize: (untyped server) -> void

    def where: (untyped identifier) -> untyped

    private

    # Represents a single remote connection found via <tt>ActionCable.server.remote_connections.where(*)</tt>.
    # Exists solely for the purpose of calling #disconnect on that connection.
    class RemoteConnection
      class InvalidIdentifiersError < StandardError
      end

      include Connection::Identification

      include Connection::InternalChannel

      def initialize: (untyped server, untyped ids) -> void

      # Uses the internal channel to disconnect the connection.
      def disconnect: () -> untyped

      attr_reader server: untyped

      private

      def set_identifier_instance_vars: (untyped ids) -> untyped

      def valid_identifiers?: (untyped ids) -> untyped
    end
  end
end
